import telebot
from telebot import types
import random
from datetime import datetime, timedelta
import time


bot = telebot.TeleBot('8496322496:AAESLPl4Glz1BdTEVn5tkRIB7glfwP36BTE')

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
USER_DATA = {}
USER_BOOKS = {}
BOOK_REVIEWS = {}


# –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—Ç—Ä—ã–≤–∫–æ–≤ –∏–∑ –∫–Ω–∏–≥
BOOK_EXCERPTS = [
    {
        "text": "–í—Å–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —Å–µ–º—å–∏ –ø–æ—Ö–æ–∂–∏ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, –∫–∞–∂–¥–∞—è –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ–º—å—è –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤–∞ –ø–æ-—Å–≤–æ–µ–º—É.",
        "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "book": "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞",
        "genre": "–ö–ª–∞—Å—Å–∏–∫–∞"
    },
    {
        "text": "–ß–µ–ª–æ–≤–µ–∫ –æ–Ω —É–º–Ω—ã–π, –Ω–æ —á—Ç–æ–±—ã —É–º–Ω–æ –ø–æ—Å—Ç—É–ø–∞—Ç—å ‚Äî –æ–¥–Ω–æ–≥–æ —É–º–∞ –º–∞–ª–æ.",
        "author": "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "book": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        "genre": "–ö–ª–∞—Å—Å–∏–∫–∞"
    },
    {
        "text": "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å, –Ω–∏–∫–æ–≥–¥–∞, –Ω–∏–∫–æ–≥–¥–∞, –Ω–∏–∫–æ–≥–¥–∞, –Ω–∏–∫–æ–≥–¥–∞ ‚Äî –Ω–∏ –≤ –≤–µ–ª–∏–∫–æ–º, –Ω–∏ –≤ –º–∞–ª–æ–º, –Ω–∏ –≤ –±–æ–ª—å—à–æ–º, –Ω–∏ –≤ –º–∞–ª–µ–Ω—å–∫–æ–º.",
        "author": "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
        "book": "",
        "genre": "–ò—Å—Ç–æ—Ä–∏—è"
    },
    {
        "text": "–Ø –º—ã—Å–ª—é, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —è —Å—É—â–µ—Å—Ç–≤—É—é.",
        "author": "–†–µ–Ω–µ –î–µ–∫–∞—Ä—Ç",
        "book": "–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ –º–µ—Ç–æ–¥–µ",
        "genre": "–§–∏–ª–æ—Å–æ—Ñ–∏—è"
    },
    {
        "text": "–ë—ã—Ç—å –∏–ª–∏ –Ω–µ –±—ã—Ç—å ‚Äî –≤–æ—Ç –≤ —á–µ–º –≤–æ–ø—Ä–æ—Å.",
        "author": "–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä",
        "book": "–ì–∞–º–ª–µ—Ç",
        "genre": "–î—Ä–∞–º–∞"
    }
]

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä–∞–º
BOOK_RECOMMENDATIONS = {
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": [
        {"title": "1984", "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", "description": "–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è –æ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ"},
        {"title": "451¬∞ –ø–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—É", "author": "–†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏", "description": "–ú–∏—Ä, –≥–¥–µ –∫–Ω–∏–≥–∏ –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º"},
        {"title": "–°–æ–ª—è—Ä–∏—Å", "author": "–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –õ–µ–º", "description": "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å —Ä–∞–∑—É–º–Ω—ã–º –æ–∫–µ–∞–Ω–æ–º"}
    ],
    "–§—ç–Ω—Ç–µ–∑–∏": [
        {"title": "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü", "author": "–î–∂.–†.–†. –¢–æ–ª–∫–∏–Ω", "description": "–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∞–≥–∞ –æ –°—Ä–µ–¥–∏–∑–µ–º—å–µ"},
        {"title": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "author": "–î–∂.–ö. –†–æ—É–ª–∏–Ω–≥", "description": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —é–Ω–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞"},
        {"title": "–í–µ–¥—å–º–∞–∫", "author": "–ê–Ω–¥–∂–µ–π –°–∞–ø–∫–æ–≤—Å–∫–∏–π", "description": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –ì–µ—Ä–∞–ª—å—Ç–∞ –∏–∑ –†–∏–≤–∏–∏"}
    ],
    "–ö–ª–∞—Å—Å–∏–∫–∞": [
        {"title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "description": "–≠–ø–æ–ø–µ—è –æ –≤–æ–π–Ω–µ 1812 –≥–æ–¥–∞"},
        {"title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "author": "–§.–ú. –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "description": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ —Ä–∞—Å–∫–∞—è–Ω–∏–∏"},
        {"title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "author": "–ú.–ê. –ë—É–ª–≥–∞–∫–æ–≤", "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∞—Ç–∏—Ä–∞ –æ –¥–æ–±—Ä–µ –∏ –∑–ª–µ"}
    ],
    "–î–µ—Ç–µ–∫—Ç–∏–≤": [
        {"title": "–£–±–∏–π—Å—Ç–≤–æ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–º —ç–∫—Å–ø—Ä–µ—Å—Å–µ", "author": "–ê–≥–∞—Ç–∞ –ö—Ä–∏—Å—Ç–∏", "description": "–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≠—Ä–∫—é–ª—è –ü—É–∞—Ä–æ"},
        {"title": "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "author": "–ê—Ä—Ç—É—Ä –ö–æ–Ω–∞–Ω –î–æ–π–ª", "description": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ —Å—ã—â–∏–∫–∞"},
        {"title": "–î–µ—Å—è—Ç—å –Ω–µ–≥—Ä–∏—Ç—è—Ç", "author": "–ê–≥–∞—Ç–∞ –ö—Ä–∏—Å—Ç–∏", "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤-–∏–∑–æ–ª—è—Ü–∏—è"}
    ]
}
def get_user_data(user_id):
    if user_id not in USER_DATA:
        USER_DATA[user_id] = {
            'reading_streak': 0,
            'last_reading_date': None,
            'daily_excerpt_received': False,
            'reminder_time': None,
            'books_read': 0
        }
    return USER_DATA[user_id]


def get_user_books(user_id):
    return USER_BOOKS.setdefault(user_id, [])

def get_book_reviews(book_title):
    return BOOK_REVIEWS.setdefault(book_title, [])


def get_daily_excerpt(user_id):
    #‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä—ã–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è

#üìÖ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é —á—Ç–µ–Ω–∏—è (streak)

#üéØ –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫

#üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_data = get_user_data(user_id)
    today = datetime.now().date()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
    if user_data['last_reading_date'] == today and user_data['daily_excerpt_received']:
        return None

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ —á—Ç–µ–Ω–∏—è
    last_date = user_data['last_reading_date']
    if last_date:
        if today == last_date + timedelta(days=1):
            user_data['reading_streak'] += 1
        elif today > last_date + timedelta(days=1):
            user_data['reading_streak'] = 1
    else:
        user_data['reading_streak'] = 1

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç—Ä—ã–≤–∫–∞
    user_data.update({
        'last_reading_date': today,
        'daily_excerpt_received': True
    })

    return random.choice(BOOK_EXCERPTS)

def create_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        ["üìñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫", "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
        ["üìä –ú–æ–∏ –∫–Ω–∏–≥–∏", "‚≠ê –û–±–∑–æ—Ä—ã"],
        ["‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    for row in buttons:
        keyboard.row(*row)
    return keyboard

def create_genre_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for genre in BOOK_RECOMMENDATIONS.keys():
        keyboard.add(types.InlineKeyboardButton(genre, callback_data=f"genre_{genre}"))
    return keyboard

def create_reminder_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    times = ["09:00", "12:00", "18:00", "20:00", "21:00", "22:00"]
    for i in range(0, len(times), 2):
        if i + 1 < len(times):
            keyboard.row(
                types.InlineKeyboardButton(times[i], callback_data=f"remind_{times[i]}"),
                types.InlineKeyboardButton(times[i+1], callback_data=f"remind_{times[i+1]}")
            )
        else:
            keyboard.row(types.InlineKeyboardButton(times[i], callback_data=f"remind_{times[i]}"))
    keyboard.row(types.InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="remind_off"))
    return keyboard


def reminder_worker():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è"""
    while True:
        current_time = datetime.now().strftime("%H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for user_id, user_data in USER_DATA.items():
            if should_send_reminder(user_data, current_time):
                send_reminder(user_id)

        time.sleep(60)


def should_send_reminder(user_data, current_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    return (user_data.get('reminder_time') == current_time and
            not user_data.get('daily_excerpt_received', False))


def send_reminder(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –ø–æ—á–∏—Ç–∞—Ç—å! üìñ")
    except:
        pass


@bot.message_handler(commands=['start'])
def start(message):
    user_data = get_user_data(message.from_user.id)

    welcome_text = f"""
üìö –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

–Ø - –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:

‚úÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—Ä—ã–≤–∫–∏ –∏–∑ –∫–Ω–∏–≥* - –Ω–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥* - –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º  
‚úÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ* - —Ç–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
‚úÖ *–û–±–∑–æ—Ä—ã –∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏* - –¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º –æ –∫–Ω–∏–≥–∞—Ö
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á—Ç–µ–Ω–∏–∏* - –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –¥–µ–Ω—å

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
    """

    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda message: message.text == "üìñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫")
def daily_excerpt(message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ä—ã–≤–æ–∫
    excerpt = get_daily_excerpt(user_id)
    if not excerpt:
        bot.send_message(message.chat.id, "üìñ –£–∂–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞! üåü")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    author_line = f"‚Äî *{excerpt['author']}*"
    if excerpt['book']:
        author_line += f", \"{excerpt['book']}\""

    streak = get_user_data(user_id)['reading_streak']

    response = f"""üìñ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫:*

"{excerpt['text']}"

{author_line}

üè∑Ô∏è *–ñ–∞–Ω—Ä:* {excerpt['genre']}
üî• *–°–µ—Ä–∏—è —á—Ç–µ–Ω–∏—è:* {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!"""

    bot.send_message(message.chat.id, response, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
def recommendations(message):
    bot.send_message(message.chat.id, "üéØ –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=create_genre_keyboard())


@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ–∏ –∫–Ω–∏–≥–∏")
def my_books(message):
    user_id = message.from_user.id
    books = get_user_books(user_id)

    if not books:
        text = """üìö *–¢–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞*

–î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É:
`/addbook –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä`
–ü—Ä–∏–º–µ—Ä: `/addbook 1984 - –î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª`"""
        bot.send_message(message.chat.id, text, parse_mode='Markdown')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books_list = "\n".join([
        f"{i}. *{b['title']}* - {b['author']}" +
        (f"\n   üí´ {b['review']}" if b.get('review') else "")
        for i, b in enumerate(books[:5], 1)
    ])

    user_data = get_user_data(user_id)
    text = f"""üìö *–¢–≤–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:*

{books_list}

üìä –í—Å–µ–≥–æ: *{user_data['books_read']}* –∫–Ω–∏–≥
üî• –°–µ—Ä–∏—è: *{user_data['reading_streak']}* –¥–Ω–µ–π"""

    if len(books) > 5:
        text += f"\n\n... –∏ –µ—â–µ {len(books) - 5} –∫–Ω–∏–≥"

    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "‚≠ê –û–±–∑–æ—Ä—ã")
def reviews(message):
    text = """‚≠ê *–û–±–∑–æ—Ä—ã –∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏*

–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã:
`/reviews –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏`

–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:
`/addbook –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä`
`/review –ù–∞–∑–≤–∞–Ω–∏–µ - –¢–≤–æ–π –æ—Ç–∑—ã–≤`"""

    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def reminders(message):
    user_data = get_user_data(message.from_user.id)
    time = user_data.get('reminder_time', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    bot.send_message(
        message.chat.id,
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: *{time}*\n\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
        parse_mode='Markdown',
        reply_markup=create_reminder_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_command(message):
    text = """üìö *–ü–æ–º–æ—â—å*

*–ú–µ–Ω—é:*
üìñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫
üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä–∞–º  
üìä –ú–æ–∏ –∫–Ω–∏–≥–∏
‚≠ê –û–±–∑–æ—Ä—ã –∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
`/addbook –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä`
`/review –ù–∞–∑–≤–∞–Ω–∏–µ - –û—Ç–∑—ã–≤`
`/reviews –ù–∞–∑–≤–∞–Ω–∏–µ`
`/start`"""

    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.message_handler(commands=['addbook'])
def add_book_command(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞
        parts = message.text.replace('/addbook', '').strip().split(' - ', 1)
        if len(parts) != 2:
            raise ValueError

        title, author = parts[0].strip(), parts[1].strip()
        user_id, user_books = message.from_user.id, get_user_books(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if any(book['title'].lower() == title.lower() for book in user_books):
            bot.send_message(message.chat.id, f"üìö –ö–Ω–∏–≥–∞ \"{title}\" —É–∂–µ –µ—Å—Ç—å!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        user_books.append({
            'title': title,
            'author': author,
            'added_date': datetime.now().strftime("%d.%m.%Y"),
            'review': None
        })
        get_user_data(user_id)['books_read'] += 1

        bot.send_message(
            message.chat.id,
            f"‚úÖ *{title}* - {author}\n\n–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤:\n`/review {title} - —Ç–≤–æ–π –æ—Ç–∑—ã–≤`",
            parse_mode='Markdown'
        )

    except:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /addbook –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä\n–ü—Ä–∏–º–µ—Ä: `/addbook 1984 - –î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª`",
            parse_mode='Markdown'
        )


@bot.message_handler(commands=['review'])
def add_review_command(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∫ –∫–Ω–∏–≥–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        parts = message.text.replace('/review', '').strip().split(' - ', 1)
        if len(parts) != 2:
            raise ValueError

        title, review_text = parts[0].strip(), parts[1].strip()
        user_id, user_books = message.from_user.id, get_user_books(message.from_user.id)

        # –ò—â–µ–º –∫–Ω–∏–≥—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
        for book in user_books:
            if book['title'].lower() == title.lower():
                book['review'] = review_text
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–µ –æ—Ç–∑—ã–≤—ã
                get_book_reviews(title).append({
                    'user': message.from_user.first_name,
                    'review': review_text,
                    'date': datetime.now().strftime("%d.%m.%Y")
                })

                bot.send_message(message.chat.id, f"‚≠ê *{title}*\nüí´ {review_text}", parse_mode='Markdown')
                return

        bot.send_message(
            message.chat.id,
            f"‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–Ω–∏–≥—É:\n`/addbook {title} - –ê–≤—Ç–æ—Ä`",
            parse_mode='Markdown'
        )

    except:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /review –ù–∞–∑–≤–∞–Ω–∏–µ - –û—Ç–∑—ã–≤\n–ü—Ä–∏–º–µ—Ä: `/review 1984 - –û—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞!`",
            parse_mode='Markdown'
        )


@bot.message_handler(commands=['reviews'])
def show_reviews_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É"""
    title = message.text.replace('/reviews', '').strip()
    if not title:
        bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /reviews –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    reviews = get_book_reviews(title)
    if not reviews:
        bot.send_message(message.chat.id, f"üìñ –ù–∞ \"{title}\" –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    reviews_list = "\n".join([
        f"{i}. *{r['user']}* ({r['date']}):\n   {r['review']}"
        for i, r in enumerate(reviews[:5], 1)
    ])

    text = f"‚≠ê *–û—Ç–∑—ã–≤—ã –Ω–∞ \"{title}\":*\n\n{reviews_list}"
    if len(reviews) > 5:
        text += f"\n\n... –∏ –µ—â–µ {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤"

    bot.send_message(message.chat.id, text, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = call.from_user.id

    if call.data.startswith("genre_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        genre = call.data.replace("genre_", "")
        books = BOOK_RECOMMENDATIONS.get(genre, [])

        if not books:
            bot.send_message(call.message.chat.id, f"‚ùå –í –∂–∞–Ω—Ä–µ '{genre}' –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return

        books_list = "\n".join([f"‚Ä¢ *{b['title']}* - {b['author']}\n  {b['description']}" for b in books])
        text = f"üìö *{genre}:*\n\n{books_list}\n\nüí° –î–æ–±–∞–≤—å: `/addbook –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä`"
        bot.send_message(call.message.chat.id, text, parse_mode='Markdown')

    elif call.data.startswith("remind_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_data = get_user_data(user_id)

        if call.data == "remind_off":
            user_data['reminder_time'] = None
            bot.send_message(call.message.chat.id, "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        else:
            time_str = call.data.replace("remind_", "")
            user_data['reminder_time'] = time_str
            bot.send_message(call.message.chat.id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: *{time_str}*", parse_mode='Markdown')


if __name__ == "__main__":
    print("üìö –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
